# TAGS: game, 2d grid, vector graphics, real world data, parsing, path finding, linked list

- key: 'aquarium'
  title: 'Aquarium'
  summary: 'Learn about arrays of objects by creating an aquarium.'
  tags: [ ]
  description: 'Arrays in Java are data structures that hold multiple objects in one memory location. They can hold a fixed number of one type of object or variable, but that object can be almost anything. In this project, we will practice manipulating arrays and accessing elements using methods from the Array class. You are the owner of an aquarium with a fixed number of tanks, you also happen to be a little indecisive and like to change which fish go in what tanks. Think of the aquarium as an array, each tank represents an index, and the fish are the objects.'
  topics: [ 'Arrays', 'Classes', 'Loops', 'Booleans and conditionals', 'NonBlockingGame class' ]
  java:
    student_files:
      - { name: 'Aquarium Student Worksheet', link: 'https://docs.google.com/document/d/1ii0hhRizk_y2dy27XGOZLsq1mH50ZJfr3PlsT_HImqg/view' }
      - { name: 'Aquarium.java', link: 'https://drive.google.com/file/d/19pWskDw9OZyKOtsXdTT6qneN0W6d6Iz8/view' }
      - { name: 'Fish.java', link: 'https://drive.google.com/file/d/17_lRiHjN6xzn75YOKsLNHkGz-SSSejXl/view' }
      - { name: 'Tester.java', link: 'https://drive.google.com/file/d/1NgdVxtE0_yAtsf6vl4kzoAyQ0kMjKMwk/view' }
    teacher_files: [ 'Aquarium Teacher Walkthrough', 'Aquarium.java', 'Fish.java', 'Tester.java' ]
  documentation: [ 'NonBlockingGame', 'NamedColor', 'NamedSymbol' ]


- key: 'emoji-builder'
  title: 'Emoji Builder'
  summary: 'Create a custom emoji using the NonBlockingGame class.'
  tags: [ '2d grid' ]
  description: 'Students use their undertanding of 2D arrays to create an emoji using the BRIDGES NonBlockingGame class. This project is indended to build student comfort with BRIDGES, so it is ungraded and there is no rubric.'
  topics: [ '2D arrays', 'Row-major order', 'Using API documentation' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Use understanding of rows and columns in order to create simple 2D pixel designs. (AP CS A Unit 8, VAR-2.F)' }
    - { verb: 'Apply', outcome: 'Use API documentation to figure out how to use Java library classes.' }
  java:
    student_files:
      - { name: 'Emoji Builder Student Worksheet', link: 'https://docs.google.com/document/d/17uc1W7pxf6pxbS_xacMSOayZuCbCsvwekh_pyVOwQrc/view' }
      - { name: 'Emoji Builder Scaffold', link: 'https://docs.google.com/document/d/1wH1QiaUZTEQSi9EmTZg31bIqoMMKea8Ci1CVyq24Mrs/view' }
      - { name: 'EmojiBuilder.java', link: 'https://drive.google.com/file/d/16uNsdHGgIkgEFsYjcNOxyRBL9ma0xU6B/view' }
    teacher_files: [ 'EmojiBuilder.java' ]
  python:
    student_files:
      - { name: 'Emoji Builder Student Worksheet', link: 'https://docs.google.com/document/d/1oeMUTXgcFvk0IQTXIxQgECIMmESwbf53oQvZM5RrqjE/view' }
      - { name: 'emojibuilder.py', link: 'https://drive.google.com/file/d/1RXQcqCH_6zJYa2jOn3i2JB22pab0w2j7/view' }
    teacher_files: [ 'emojibuilder.py' ]
  documentation: [ 'NamedColor', 'NonBlockingGame' ]


- key: 'shape-collection'
  title: 'Shape Collection'
  summary: 'Draw circles, rectangles, polygons, and text.'
  tags: [ 'vector graphics' ]
  description: 'Draw circles, rectangles, polygons, and text with the Bridges SymbolCollection class.'
  topics: [ 'Reading source code', 'API usage', 'Creating objects' ]
  java:
    student_files:
      - { name: 'Shape Collection Student Worksheet', link: 'https://docs.google.com/document/d/13HFtOq54klYDPdpFiMNSxq8r1ct2eW27ii68tzgKzik/view' }
      - { name: 'Shapes.java', link: 'https://drive.google.com/file/d/1-Cxx-7ADuvfBi7NKBn4mrE2bLitVFaGj/view' }
    teacher_files: [ 'Shape Collection Worksheet Answer Key' ]
  python:
    student_files:
      - { name: 'Shape Collection Student Worksheet', link: 'https://docs.google.com/document/d/1fVRPQDUpk3KYhYykM1Tqy-Aw-OXdy04OOKRv4JLe8N8/view' }
      - { name: 'shapes.py', link: 'https://drive.google.com/file/d/1vHcX4EQrM873VW22mMrsmW_my6vsB59w/view' }
    teacher_files: [ 'Shape Collection Worksheet Answer Key' ]
  documentation: [ 'Bridges', 'SymbolCollection', 'Symbol', 'Circle', 'Rectangle', 'Polygon', 'Polyline', 'Text' ]


- key: 'pattern-builder'
  title: 'Pattern Builder'
  summary: 'Create colorful patterns with the ColorGrid Class.'
  tags: [ '2d grid' ]
  description: 'Using the BRIDGES ColorGrid class, students solve seven pattern-creation challenges by applying knowledge of conditionals, nested loops, and 2D array traversal.'
  topics: [ 'Nested loops', '2D arrays', 'Conditionals' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Represent branching logical processes with conditional statements. (AP CS A Unit 3, CON-2.C)' }
    - { verb: 'Apply', outcome: 'Use understanding of rows and columns while creating algorithms for nested iteration. (AP CS A Unit 4, CON-2.C, CON-2.E, CON-2.G)' }
    - { verb: 'Apply', outcome: 'Use understanding of "out of bounds" errors when debugging code. (AP CS A Unit 8, CON-2.N)' }
    - { verb: 'Apply', outcome: 'Use API documentation to figure out how to use Java library classes.' }
  java:
    student_files:
      - { name: 'Pattern Builder Student Worksheet', link: 'https://docs.google.com/document/d/1EKY93W9TfvwBYRF4bqusL2TgwUD6n3pGcTAjPKy_Lbs/view' }
      - { name: 'Pattern.java', link: 'https://drive.google.com/file/d/1xqZFChdormnMRtZz-jKskJAYtVWw-TAY/view' }
      - { name: 'PatternRunner.java', link: 'https://drive.google.com/file/d/1CMkBZ3cZ8dfCvCX_jO7-aV8c7LwZ0uVI/view' }
    teacher_files: [ 'Pattern.java', 'PatternRunner.java' ]
  documentation: [ 'Bridges', 'ColorGrid', 'Grid' ]


- key: 'square-fill'
  title: 'Square Fill'
  summary: 'Create random layered squares using the ColorGrid class.'
  tags: [ '2d grid' ]
  description: 'The BRIDGES library has a class called ColorGrid that allows you to represent an image as a grid of colored cells. The programmer defines the number of rows, number of columns, and default color. In this project, you will use iteration to create layers of squares until the entire grid is filled.'
  image_caption: 'Example output on a 10 by 10 grid'
  topics: [ 'Nested loops', '2D arrays', 'Conditionals' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Represent branching logical processes with conditional statements. (AP CS A Unit 3, CON-2.C)' }
    - { verb: 'Apply', outcome: 'Use understanding of rows and columns while creating algorithms for nested iteration. (AP CS A Unit 4, CON-2.C, CON-2.E, CON-2.G)' }
    - { verb: 'Apply', outcome: 'Use understanding of "out of bounds" errors when debugging code. (AP CS A Unit 8, CON-2.N)' }
    - { verb: 'Apply', outcome: 'Use API documentation to figure out how to use Java library classes.' }
    - { verb: 'Apply', outcome: 'Use documentation and class headers to determine inheritance relationships. (AP CS A Unit 9, MOD-3.B)' }
    - { verb: 'Create', outcome: 'Apply programming skills to avoid out-of-bounds errors and test for requirements when generating intricate repeating patterns within a 2D grid.' }
  java:
    student_files:
      - { name: 'Square Fill Student Worksheet', link: 'https://docs.google.com/document/d/1YPPPuxtveP1tTLcaGWY0l0HhSuePjwzdcX4oWTZti5w/view' }
      - { name: 'Square Fill Scaffold', link: 'https://docs.google.com/document/d/1CSgrKCvm8gS2T0ETlvUIcUi2wfCUQsHVohjxf1v2Mww/view' }
      - { name: 'SquareFill.java', link: 'https://drive.google.com/file/d/1Yz2-rPIJfOhWyF2FI-axsA9UuIEOeuk0/view' }
    teacher_files: [ 'Square Fill Teacher Walkthrough', 'Square Fill Solution', 'SquareFill.java' ]
  documentation: [ 'Bridges', 'ColorGrid', 'Color' ]


- key: 'gamebasics-1'
  title: 'GameBasics I'
  summary: 'Display a custom message and alter it with keyboard input.'
  tags: [ 'game', '2d grid' ]
  description: 'The BRIDGES library has a class called NonBlockingGame that allows you to create simple games based on board grids. In this project, students will use the NonBlockingGame class to create a grid that displays a message, one letter per cell. This is not a game yet, but develops prerequisite understanding.'
  topics: [ '2D arrays', 'API usage (NonBlockingGame class, NamedSymbol enum, NamedColor enum)', 'Inheritance', 'Abstract classes' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Create objects by calling constructors with parameters. (AP CS A Unit 2, MOD-1.D)' }
    - { verb: 'Apply', outcome: 'Use typed variables to represent and refer to data. (AP CS A Unit 2, VAR-1.D)' }
    - { verb: 'Apply', outcome: 'Represent branching logical processes with conditional statements. (AP CS A Unit 3, CON-2.C)' }
    - { verb: 'Apply', outcome: 'Use understanding of rows and columns while creating algorithms for nested iteration. (AP CS A Unit 4, CON-2.C, CON-2.E, CON-2.G)' }
    - { verb: 'Apply', outcome: 'Use understanding of "out of bounds" errors when debugging code. (AP CS A Unit 8, CON-2.N)' }
    - { verb: 'Apply', outcome: 'Use API documentation to figure out how to use Java library classes.' }
    - { verb: 'Apply', outcome: 'Use documentation and class headers to determine inheritance relationships. (AP CS A Unit 9, MOD-3.B)' }
    - { verb: 'Analyze', outcome: 'Analyze library class code, applying understanding of abstract/concrete classes, abstract/concrete methods, constructors, and instance variables. (AP CS A Units 2, 5, and 9)' }
  java:
    student_files:
      - { name: 'GameBasics I Student Worksheet', link: 'https://docs.google.com/document/d/1ucgjKJX76ZKL0TqcmcRe6A2BsiCHMwV02BlmpfVs3m8/view' }
      - { name: 'GameBasics I Scaffold', link: 'https://docs.google.com/document/d/12IwOhLCPeh-HKLuBa5_YOdQOIx3ynKHFocXl0JwyRsQ/view' }
      - { name: 'GameBasics1.java', link: 'https://drive.google.com/file/d/1ehoM_yAnQWs_X1GOq3OIgeHzvzA8gou6/view' }
    teacher_files: [ 'GameBasics I Teacher Walkthrough', 'GameBasics1.java' ]
  python:
    student_files:
      - { name: 'GameBasics I Student Worksheet', link: 'https://docs.google.com/document/d/1rWdnj6tHlnJa5Pz4Yn1mbBj_4hQ-iGMOsQ38k3PBEIA/view' }
      - { name: 'gamebasics1.py', link: 'https://drive.google.com/file/d/16uxS5qLqdbBTWjRCci4BLRiyQq8m3o1N/view' }
    teacher_files: [ 'GameBasics I Teacher Walkthrough', 'gamebasics1.py' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor', 'NamedSymbol' ]


- key: 'gamebasics-2'
  title: 'GameBasics II'
  summary: 'Create a player that can be moved around the game board with keyboard input.'
  tags: [ 'game', '2d grid' ]
  description: 'In this second game basics project, students use the NonBlockingGame class to create a player that can be moved around the screen with the arrow keys.'
  topics: [ '2D arrays', 'API usage (NonBlockingGame class, NamedSymbol enum, NamedColor enum)', 'Event-driven programming' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Create objects by calling constructors with parameters. (AP CS A Unit 2, MOD-1.D)' }
    - { verb: 'Apply', outcome: 'Use typed variables to represent and refer to data. (AP CS A Unit 2, VAR-1.D)' }
    - { verb: 'Apply', outcome: 'Represent branching logical processes with conditional statements. (AP CS A Unit 3, CON-2.C)' }
    - { verb: 'Apply', outcome: 'Use understanding of rows and columns while creating algorithms for nested iteration. (AP CS A Unit 4, CON-2.C, CON-2.E, CON-2.G)' }
    - { verb: 'Apply', outcome: 'Use understanding of "out of bounds" errors when debugging code. (AP CS A Unit 8, CON-2.N)' }
    - { verb: 'Apply', outcome: 'Use API documentation to figure out how to use Java library classes.' }
    - { verb: 'Apply', outcome: 'Use documentation and class headers to determine inheritance relationships. (AP CS A Unit 9, MOD-3.B)' }
    - { verb: 'Analyze', outcome: 'Analyze library class code, applying understanding of abstract/concrete classes, abstract/concrete methods, constructors, and instance variables. (AP CS A Units 2, 5, and 9)' }
  java:
    student_files:
      - { name: 'GameBasics II Student Worksheet', link: 'https://docs.google.com/document/d/1liUUBin6QVxC7EpL5wcU-WyqfXMynSyZryfUUeyUlsQ/view' }
      - { name: 'GameBasics II Scaffold', link: 'https://docs.google.com/document/d/1Y2QvUvjDJBdMJGDoghOkoUF2p4U1s6717-L9Z_Vu56g/view' }
      - { name: 'GameBasics2.java', link: 'https://drive.google.com/file/d/1lQoGbIb_OVW-4sRZ_CGM7rli_Bs0Tc9l/view' }
    teacher_files: [ 'GameBasics II Teacher Walkthrough', 'GameBasics2.java' ]
  python:
    student_files:
      - { name: 'GameBasics II Student Worksheet', link: 'https://docs.google.com/document/d/1ZhWOkszjj1dXRgNoVGxULgG9de4w06CdgBrw0d3vBJk/view' }
      - { name: 'game_basics_2', link: 'https://drive.google.com/file/d/1wkzSNPn6KekRae_Y-XWXvUc-RCP1Gi5m/view' }
    teacher_files: [ 'game_basics_2.py' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor', 'NamedSymbol' ]


- key: 'bugstomp'
  title: 'BugStomp'
  summary: 'Make a whack-a-mole style game where the player stomps bugs to increase their score.'
  tags: [ 'game', '2d grid' ]
  description: 'BugStomp is a whack-a-mole style game where you use the arrow keys to move your player and attempt to touch or "stomp" the bug. The bug flashes to a random location on the board after a set number of frames. For each bug stomped, the score increases until the player eventually wins. In this project, you will implement the BugStomp game with BRIDGES.'
  topics: [ 'Random class', 'API usage', 'Arrays', 'Nested loops', 'Conditionals' ]
  java:
    student_files:
      - { name: 'BugStomp Student Worksheet', link: 'https://docs.google.com/document/d/1oDybdZV9qj9erwPtJn9idqjvsHwtk7Yk4sm6bnobIr8/view' }
      - { name: 'BugStomp Scaffold', link: 'https://docs.google.com/document/d/1hbb2x9Tst9RXOOZbgnvkhSm9Rx6uRIUWB3rVT8C97Zo/view' }
      - { name: 'BugStomp.java', link: 'https://https://drive.google.com/file/d/1FgZofdRKoJ-L1tfXbue-ZVvRhE7Ynj12/view' }
    teacher_files: [ 'BugStomp Solution', 'BugStomp.java' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor', 'NamedSymbol' ]


- key: 'rainbow-snake'
  title: 'Rainbow Snake'
  summary: 'Create a colorful Snake game.'
  tags: [ 'game', '2d grid' ]
  description: 'Use the arrow keys to move a snake around the board to eat apples. Try to eat as many apples as possible. It will get more difficult the longer you play, with the snake growing in size for each apple eaten.'
  topics: [ 'API usage', 'Arrays', 'Loops', 'Conditionals', 'ArrayLists', 'Mod' ]
  java:
    student_files:
      - { name: 'Rainbow Snake Student Worksheet', link: 'https://docs.google.com/document/d/1UkCBdZs4MCLxKoQ4erhtW4c8DMG7XdZmoIjgfg4qgp4/view' }
      - { name: 'SnakeGame.java', link: 'https://drive.google.com/file/d/1EepVuCnYqDipVPwcO3ZjjIT08gVN7X2L/view' }
    teacher_files: [ 'Rainbow Snake Teacher Walkthrough', 'SnakeGame.java' ]
  python:
    student_files:
      - { name: 'Snake Student Worksheet', link: 'https://docs.google.com/document/d/1E6ZeOkuITrk56RX1Rr8IFmf1P50ZLEIp7bEE4EYIA6U/view' }
      - { name: 'snake_game.py', link: 'https://drive.google.com/file/d/1gPZTeUL-9V8xlEQbAfMYtLq9X-yYW3o6/view' }
    teacher_files: [ 'snake_game.py' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor', 'NamedSymbol' ]


- key: 'tron'
  title: 'Tron'
  summary: 'Create a two-player game that resembles the movie Tron.'
  tags: [ 'game', '2d grid' ]
  description: 'In this project, you will use the NonBlockingGame class to make a two-player video game. Each player controls a snake that gets longer and longer, and when one player crashes into something, the other person wins.'
  topics: [ 'ArrayLists', 'Classes', 'Loops', 'Booleans and conditionals', 'NonBlockingGame class' ]
  java:
    student_files:
      - { name: 'Tron Student Worksheet', link: 'https://docs.google.com/document/d/1pHgukZrm3rRvjK92xGxC8IdgJ5iX1qoRDGNi54v5eDg/view' }
      - { name: 'Tron.java', link: 'https://drive.google.com/file/d/1JtXJetGJiv5366gSfzKyx9yLDUAhqRGy/view' }
      - { name: 'Snake.java', link: 'https://drive.google.com/file/d/1Bl1LRJZmYXJ9WhxAcVreyLI2rxozMI5-/view' }
    teacher_files: [ 'Tron Teacher Walkthrough', 'Tron.java', 'Snake.java' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor' ]


- key: 'monster-adventure'
  title: 'Monster Adventure'
  summary: 'Player collects fruit while avoiding the monster.'
  tags: [ 'game', '2d grid' ]
  description: 'Monster Adventure is a type of collecting and avoiding game, where the player will be collecting fruits from the map and avoiding the monster, which will follow the player. The player will use the arrow keys to control the character‘s moves around the map. The score will increase until the player eventually wins.'
  topics: [ 'Methods', 'Classes', 'Loops', 'Booleans and conditionals', 'NonBlockingGame class', '2d arrays' ]
  java:
    student_files:
      - { name: 'Monster Adventure Student Worksheet', link: 'https://docs.google.com/document/d/15GFjiNJkStH75jWFCgdp_sd8qt8ORhPdWcYU-IgBf3w/view' }
      - { name: 'GameRunner.java', link: 'https://drive.google.com/file/d/1GvFeO5D8EFFIJppreS_EwwMDWd-8KHby/view' }
      - { name: 'Monster.java', link: 'https://drive.google.com/file/d/1HqiqBiiee8iD3rj6Vta_87SS_2E0Mrsa/view' }
      - { name: 'Map.java', link: 'https://drive.google.com/file/d/1JuCSzitpu0FAjj6cehbyP3qeMyW4kK_c/view' }
    teacher_files: [ 'Monster Adventure Teacher Walkthrough', 'GameRunner.java', 'Monster.java', 'Map.java' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor', 'NamedSymbol' ]


- key: 'chaos-game'
  title: 'Chaos Game'
  summary: 'Create fractal designs using a chaos game algorithm.'
  tags: [ ]
  description: 'In this project, students will create fractal designs using a chaos game algorithm. They will learn about Java record classes and will use the BRIDGES GraphAdjList class for creating visualisations.'
  topics: [ 'Record classes', 'Iteration', 'API usage' ]
  java:
    student_files:
      - { name: 'Chaos Game Student Worksheet', link: 'https://docs.google.com/document/d/19lsZeRmkIqmtxp31eaJ-R_Tk0ceiv1r-LQQsDxDpDms/view' }
      - { name: 'ChaosGame.java', link: 'https://drive.google.com/file/d/1sn2DNypVWZjjSPLUcMCvdW-cTGoded31/view' }
    teacher_files: [ 'Chaos Game Teacher Walkthrough', 'Chaos Game Worksheet Answer Key', 'ChaosGame.java' ]
  documentation: [ 'Bridges', 'GraphAdjList', 'Element' ]


- key: 'game-of-life'
  title: 'Game of Life'
  summary: 'Create an interactive cellular automaton.'
  tags: [ '2d grid' ]
  description: 'The Game of Life is a two-dimensional cellular automaton invented by John Conway in 1970. The state of each individual cell is determined by simple rules, but patterns of hundreds of cells working together can exhibit complex behavior. In this project, students will create an interactive Game of Life animation using the BRIDGES Java API.'
  topics: [ 'Cellular automata', 'Nested loops', '2D arrays', 'Conditionals', 'Methods', 'API usage' ]
  java:
    student_files:
      - { name: 'Game of Life Student Worksheet', link: 'https://docs.google.com/document/d/1Q8-LXiLvK5ovG9hyxgY6O3-7ZKEciVqU6cYk9NZUTcY/view' }
      - { name: 'GameOfLife.java', link: 'https://drive.google.com/file/d/1R474BUVZuQ2Gbs6vi5XfUwqNHzwN9Me6/view' }
    teacher_files: [ 'Game of Life Teacher Walkthrough', 'GameOfLife.java' ]
  documentation: [ 'GameBase', 'NonBlockingGame', 'NamedColor' ]


- key: 'sudoku'
  title: 'Sudoku'
  summary: 'Create a program for solving sudoku puzzles.'
  tags: [ 'game', '2d grid' ]
  description: 'Sudoku is a puzzle game played on a 9 by 9 grid. The objective is to fill the grid with numbers such that each row, column, and 3 by 3 subgrid contains every number from 1 to 9. The game starts with the grid partially completed so that there is only a single solution. In this project, you will create your own sudoku game using the BRIDGES Java API.'
  topics: [ 'Nested loops', '2D arrays', 'Booleans and conditionals', 'Reading source code', 'API usage' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Use an API reference in order to learn how to use Java classes.' }
    - { verb: 'Apply', outcome: 'Use understanding of 2D arrays, rows, and columns while creating algorithms for nested iteration. (AP CS A Unit 4, CON-2.C, CON-2.E, CON-2.G)' }
    - { verb: 'Apply', outcome: 'Represent branching logical processes through development of complex conditionals. (AP CS A Unit 3, CON-2.C)' }
    - { verb: 'Apply', outcome: 'Demonstrate perseverance while using APIs and other resources when independently developing programming skills.' }
    - { verb: 'Understand', outcome: 'Describe how parallel arrays can be used to keep track of changing properties.' }
    - { verb: 'Create', outcome: 'Apply the above cognitive skills with 2D data structures when developing original solutions and conducting requirements testing.' }
  java:
    student_files:
      - { name: 'Sudoku Student Worksheet', link: 'https://docs.google.com/document/d/1C3r20XU2EYtZYHL_yCqFebuMVGoPs9XjKGDTcYVsG0w/view' }
      - { name: 'Sudoku.java', link: 'https://drive.google.com/file/d/1-FR6cNZdUok_qG5xcvgCdckM_LsgkSz_/view' }
      - { name: 'GridGenerator.java', link: 'https://drive.google.com/file/d/1jpxIsDvyEqUlTTDAemLvKrxA0LZCl6Uy/view' }
      - { name: 'Game.java', link: 'https://drive.google.com/file/d/1ZduvXJgicqj-0t1N-0121971nNE3ziTA/view' }
      - { name: 'Keyboard.java', link: 'https://drive.google.com/file/d/1aE48jraDCgoV-ArYbGXyMv6D0Y8r9vRv/view' }
    teacher_files: [ 'Sudoku Teacher Walkthrough', 'Sudoku Worksheet Answer Key', 'Sudoku.java', 'GridGenerator.java' ]
  documentation: [ 'NamedColor', 'NamedSymbol' ]


- key: 'patterns-in-song-lyrics'
  title: 'Patterns in Song Lyrics'
  summary: 'Detect repetition in song lyrics and generate a graphical representation of the pattern.'
  tags: [ 'real-world data', 'parsing' ]
  description: 'In this project, students access song lyrics using BRIDGES and check for repetition. They display the repetition with the ColorGrid class, creating patterns like the following:'
  image_caption: 'Example output for the song "Harder Faster Stronger" by Daft Punk.'
  topics: [ 'API usage', 'String processing', 'ColorGrid (BRIDGES class for pixel-based graphics)', 'Loops', 'Conditionals' ]
  java:
    student_files:
      - { name: 'Patterns in Song Lyrics Student Worksheet', link: 'https://docs.google.com/document/d/1qEoQG77AXxfklH6h-eszEI7K-XlJXhn65qO_ElxzsnQ/view' }
      - { name: 'GridLyrics.java', link: 'https://drive.google.com/file/d/1GApUO0YU1Uh5QEXjxmEUMlAvEBjC6DlR/view' }
    teacher_files:  [ 'Patterns in Song Lyrics Worksheet Answer Key', 'GridLyrics.java' ]
  python:
    student_files:
      - { name: 'Patterns in Song Lyrics Student Worksheet', link: 'https://docs.google.com/document/d/1PVm_5N6C5a7RyDaVGsUAnKlKgyAGa1YOBgynFOfZjrM/view' }
      - { name: 'grid_lyrics.py', link: 'https://drive.google.com/file/d/1TeqVoZ3mgvkz-koTelCVCP_UJxadV_6l/view' }
    teacher_files:  [ 'Patterns in Song Lyrics Worksheet Answer Key', 'grid_lyrics.py' ]
  documentation: [ 'Bridges', 'DataSource', 'Color', 'ColorGrid', 'Song' ]


- key: 'mountain-paths'
  title: 'Mountain Paths'
  summary: 'Given elevation data, find the path of least elevation change using a greedy algorithm.'
  tags: [ 'real-world data', 'path finding' ]
  description: 'In this project, students read elevation data into a 2D array, compute the path of least elevation change using a greedy algorithm, and visualise the path with the ColorGrid class.'
  image_caption: 'In the map above, lighter shades mean higher elevation. The red line shows a "lowest elevation change" path traveling west to east.'
  # HTML?
  topics: [ 'Command line arguments', 'Traversing 2D arrays', 'Reading files', 'Greedy algorithm', 'ColorGrid (BRIDGES class for pixel-based graphics)' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Use file path operations to access data files.' }
    - { verb: 'Understand', outcome: 'Identify the purpose of String[] args in the context of the main method.' }
    - { verb: 'Understand', outcome: 'Analyse and explain code that reads data files.' }
    - { verb: 'Understand', outcome: 'Analyse and explain code that converts elevation data into a 2D array and creates a grayscale image.' }
    - { verb: 'Remember', outcome: 'Define the greedy algorithm.' }
    - { verb: 'Apply', outcome: 'Develop a greedy algorithm as a heuristic for finding a "least elevation change" path given elevation data.' }
    - { verb: 'Create', outcome: 'Create a visual representation of the path using the BRIDGES ColorGrid class.' }
    - { verb: 'Evaluate', outcome: 'Critique the greedy algorithm as a means of achieving the optimal path.' }
  java:
    student_files:
      - { name: 'Mountain Paths Student Worksheet (Less Comfortable)', link: 'https://docs.google.com/document/d/1LOf7cN5H1GBVPTGKx0vSZA2UFRBYzEpAzokl_T8wVrw/view' }
      - { name: 'Mountain Paths Student Worksheet (More Comfortable)', link: 'https://docs.google.com/document/d/17wSzZrs-L0wtSROvea-DKRgBovp95SoBiFXDNj4qYXY/view' }
      - { name: 'Command Line Arguments (BlueJ)', link: 'https://docs.google.com/document/d/1i3ZBrgEIYLR2PIJ2ISSBj1Vn2EHWZxXsDEIFCjBexXA/view' }
      - { name: 'Command Line Arguments (CS50 Cloud9)', link: 'https://docs.google.com/document/d/1PuM6Fc6QfWhW1hMy2Sxe5tXhC7gO2KRGeaZVKjH2JFo/view' }
      - { name: 'Command Line Arguments (Eclipse)', link: 'https://docs.google.com/document/d/1YYmIRZGqXZ4lOX6QJekgIjlt7pTbGD_BiFjwifKGHfQ/view' }
      - { name: 'Command Line Arguments (IntelliJ)', link: 'https://docs.google.com/document/d/1zCqli0DCV_dTys6NYDe6vdbRUKxLGfc8UwSXLuJolXI/view' }
      - { name: 'BHBLarea.dat', link: 'https://drive.google.com/file/d/1nxiFbBywilP2c4XWkFxOpbvakC1IAtxm/view' }
      - { name: 'Colorado_480x480.dat', link: 'https://drive.google.com/file/d/1c4kuCc-w0aQVoZJ7GKZSL-qqumGwUTHE/view' }
      - { name: 'Colorado_844x480.dat', link: 'https://drive.google.com/file/d/19iR7wqAW4HgDQE9PC_A9mOgRbsJcMvCy/view' }
      - { name: 'Mountain Paths Test Cases', link: 'https://docs.google.com/document/d/1lFfD6bNpzcDzT9_yZqBnMeey_NtGNNTyFjXbRGyogNY/view' }
      - { name: 'Float variables description', link: 'https://docs.google.com/document/d/1TJmC317v0jx_m3KvlyQck62VonvDSdeGf4F1iPgDczQ/view' }
      - { name: 'Mountain Paths Scaffold', link: 'https://docs.google.com/document/d/1jFD-z7txjIWHJgWZ7NHPCji3C17x46m0v-UiDa5zC6c/view' }
      - { name: 'MountainPath.java', link: 'https://drive.google.com/file/d/15EmUSQYQ5Ot-LLwKClTMnoVs9rE8t5Eb/view' }
    teacher_files: [ 'Mountain Paths Teacher Walkthrough', 'Mountain Paths Worksheet Answer Key', 'getImage Comment Example', 'readData Comment Example', 'Mountain Paths Rubric', 'Mountain Paths Solution', 'MountainPath.java' ]
  documentation: [ 'Bridges', 'ColorGrid', 'Color' ]


- key: 'earthquake-linked-list'
  title: 'Earthquake Linked List'
  summary: 'Generate a singly linked list containing real-time earthquake data.'
  tags: [ 'real-world data', 'linked list' ]
  description: 'Students create a linked list using real-time earthquake data from the US Geological Survey. This project involves reading source code and arranging code segments in the correct order.'
  image_caption: 'Each node represents an earthquake. The node''s color, size, and shape vary depending on the earthquake''s magnitude and location.'
  topics: [ 'Linked lists', 'Reading source code', 'API usage', 'Element class', 'EarthquakeUSGS class' ]
  java:
    student_files:
      - { name: 'Earthquake Linked List Student Worksheet', link: 'https://docs.google.com/document/d/1oisYJbWIy8T-rqHunXDbAe6XMY1uhh3UHyk6y5HLZCo/view' }
      - { name: 'EarthquakeList.java', link: 'https://drive.google.com/file/d/1aREWCQ2E-K745UYz5dowP2wY74RakH_L/view' }
    teacher_files: [ 'Earthquake Linked List Worksheet Answer Key', 'EarthquakeList.java' ]
  python:
    student_files:
      - { name: 'Earthquake Linked List Student Worksheet', link: 'https://docs.google.com/document/d/1_1YAMXZe2O2VIpjBAOH3jnphvI1iCKJka9YhtC6B0jQ/view' }
      - { name: 'earthquake_list.py', link: 'https://drive.google.com/file/d/19Z25jyqpl-EAy_ziIGl5JyG2t3pKc1r2/view' }
    teacher_files: [ 'Earthquake Linked List Worksheet Answer Key', 'earthquake_list.py' ]
  documentation: [ 'Bridges', 'Element', 'EarthquakeUSGS', 'SLelement' ]

- key: 'us-cities-map'
  title: 'US Cities Map'
  summary: 'Create a Map of Cities in the US'
  tags: [ 'real-world data' ]
  description: 'Use information stored in the bridges library to create a map of the cities in the United States. You will learn the basics of how hashmaps work as well as creating graphs in bridges. '
  topics: [ 'City Class', 'Hashmap', 'Element Class', 'GraphAdjList' ]
  java:
    student_files:
      - { name: 'US Cities Student Worksheet', link: 'https://docs.google.com/document/d/1eBlB-r8vDc7tfzOu5cdeXf8k5Fls-20rmDm58vhyr_g/view' }
      - { name: 'USCitiesMapTemplate.java', link: 'https://drive.google.com/file/d/1wK94795TVWiU8rta3DZ5gf1xYMjPVBj-/view' }
    teacher_files: [ 'US Cities Worksheet Answer Key', 'USCitiesMap.java' ]
  documentation: [ 'Bridges', 'Element', 'GraphAdjList', 'City' ]

- key: 'maze-generator'
  title: 'Maze Generator'
  summary: 'Build solvable mazes with a random-branching algorithm.'
  tags: [ '2d grid' ]
  description: 'In this project, students use an algorithm to randomly generate mazes, and display them with the BRIDGES ColorGrid class. The maze is stored as a two-dimensional array of cells. It starts with a single cell in the center, and then branches randomly until the entire grid is filled.'
  topics: [ 'Enumerations', 'Arraylists', '2D arrays', 'Nested loops', 'API usage', 'Methods', 'Conditionals' ]
  java:
    student_files:
      - { name: 'Maze Generator Student Worksheet', link: 'https://docs.google.com/document/d/1q6raFmAw6fJCe5JaurXIaqf3YxzNmLYspSGryAorB68/view' }
      - { name: 'Maze Algorithm', link: 'https://docs.google.com/document/d/1w0uf78Ghi1vQqtwp12-AROTa0I4LcM6-pkMew9wGi-Q/view' }
      - { name: 'MazeGenerator.java', link: 'https://drive.google.com/file/d/1oxG0e-Azo3d3ff8Ceju_pmsklJoS5XbE/view' }
      - { name: 'Cell.java', link: 'https://drive.google.com/file/u/1/d/13qoFQcXWocoCvYJA4h1hSkpzrZbsjC9k/view' }
      - { name: 'Direction.java', link: 'https://drive.google.com/file/d/1JMz8A7kOU7HJpavIjhbBIBtlz6t6QL7k/view' }
    teacher_files: [ 'Maze Generator Teacher Walkthrough', 'Maze Generator Worksheet Answer Key', 'MazeGenerator.java', 'Cell.java', 'Direction.java' ]
  documentation: [ 'Bridges', 'ColorGrid', 'Color' ]


- key: 'interpreter'
  title: 'Interpreter'
  summary: 'Create your own programming language.'
  tags: [ 'vector graphics', 'parsing' ]
  description: 'In this project, students will create an interpreter for a simple programming language. The interpreter will parse a file into a list of commands, and then execute the commands, using BRIDGES to create circles, polygons, and lines.'
  image_caption: 'Example program and output'
  topics: [ 'Command line arguments', 'Try and catch blocks', 'Reading files', 'StringBuilder class', 'String parsing', 'Arraylists', 'BRIDGES SymbolCollection API' ]
  java:
    student_files:
      - { name: 'Interpreter Student Worksheet', link: 'https://docs.google.com/document/d/1mGX9JIlsIQwPM5QjFf4BXCSUdaFntUbxLUedsCjPD0E/view' }
      - { name: 'example-output.png', link: 'https://drive.google.com/file/d/1ehWqQIj5Yqhfw4jfOkA0LojidbM87B2O/view' }
      - { name: 'Interpreter.java', link: 'https://drive.google.com/file/d/13jVQs9voHRcaWjYo9Qa88gLxGJjlDCJU/view' }
    teacher_files: [ 'Interpreter Teacher Walkthrough', 'Interpreter Worksheet Answer Key', 'Interpreter.java' ]
  documentation: [ 'Bridges', 'SymbolCollection', 'Symbol', 'Circle', 'Rectangle', 'Polygon', 'Polyline', 'Text' ]


- key: 'street-map'
  title: 'Street Map'
  summary: 'Use Dijkstra''s algorithm to find the shortest path across a city.'
  tags: [ 'real-world data', 'path finding' ]
  description: 'A graph is a mathematical object consisting of connections (edges) between points (vertices). Graphs are used fairly often in computer science, because they can model many of the networks that arise from real-world data. In this project, we will use a technique called Dijkstra''s algorithm to find the shortest path across a city.'
  image_caption: 'Example output for New York City; the shortest path from the northwest to the southeast in marked in red.'
  topics: [ 'Graphs', 'Dijkstra''s algorithm', 'Records', 'Nested classes', 'Hash-maps and hash-sets', 'API usage' ]
  java:
    student_files:
      - { name: 'Street Map Student Worksheet', link: 'https://docs.google.com/document/d/1v_35mixjUBAOym_KqmJKEcSgFSByhkHhZF-pYWjg52w/view' }
      - { name: 'Main.java', link: 'https://drive.google.com/file/d/1ecuC6u9K682KEvRnCd0rqF2ws_PqEWJL/view' }
      - { name: 'StreetMap.java', link: 'https://drive.google.com/file/d/16wtzboVzDxKv5cDpccyA_J5GRhEuBhJv/view' }
    teacher_files: [ 'Street Map Teacher Walkthrough', 'Street Map Worksheet Answer Key', 'Main.java', 'StreetMap.java' ]
  documentation: [ 'Bridges', 'Color', 'Element', 'GraphAdjList', 'Edge', 'DataSource', 'OsmVertex', 'OsmEdge' ]

- key: 'ben'
  title: 'Ben'
  summary: 'Create a player that can be moved around the game board with keyboard input.'
  tags: [ 'game', '2d grid' ]
  description: 'In this second game basics project, students use the NonBlockingGame class to create a player that can be moved around the screen with the arrow keys.'
  topics: [ '2D arrays', 'API usage (NonBlockingGame class, NamedSymbol enum, NamedColor enum)', 'Event-driven programming' ]
  outcomes:
    - { verb: 'Apply', outcome: 'Create objects by calling constructors with parameters. (AP CS A Unit 2, MOD-1.D)' }
    - { verb: 'Apply', outcome: 'Use typed variables to represent and refer to data. (AP CS A Unit 2, VAR-1.D)' }
    - { verb: 'Apply', outcome: 'Represent branching logical processes with conditional statements. (AP CS A Unit 3, CON-2.C)' }
    - { verb: 'Apply', outcome: 'Use understanding of rows and columns while creating algorithms for nested iteration. (AP CS A Unit 4, CON-2.C, CON-2.E, CON-2.G)' }
    - { verb: 'Apply', outcome: 'Use understanding of "out of bounds" errors when debugging code. (AP CS A Unit 8, CON-2.N)' }
    - { verb: 'Apply', outcome: 'Use API documentation to figure out how to use Java library classes.' }
    - { verb: 'Apply', outcome: 'Use documentation and class headers to determine inheritance relationships. (AP CS A Unit 9, MOD-3.B)' }
    - { verb: 'Analyze', outcome: 'Analyze library class code, applying understanding of abstract/concrete classes, abstract/concrete methods, constructors, and instance variables. (AP CS A Units 2, 5, and 9)' }
  java:
    student_files:
      - { name: 'Ben Student Worksheet', link: 'https://docs.google.com/document/d/1liUUBin6QVxC7EpL5wcU-WyqfXMynSyZryfUUeyUlsQ/view' }
      - { name: 'Ben Scaffold', link: 'https://docs.google.com/document/d/1Y2QvUvjDJBdMJGDoghOkoUF2p4U1s6717-L9Z_Vu56g/view' }
      - { name: 'Ben.java', link: 'https://drive.google.com/file/d/1lQoGbIb_OVW-4sRZ_CGM7rli_Bs0Tc9l/view' }
    teacher_files: [ 'Ben Teacher Walkthrough', 'Ben.java' ]
  python:
    student_files:
      - { name: 'Ben Student Worksheet', link: 'https://docs.google.com/document/d/1ZhWOkszjj1dXRgNoVGxULgG9de4w06CdgBrw0d3vBJk/view' }
      - { name: 'ben', link: 'https://drive.google.com/file/d/1wkzSNPn6KekRae_Y-XWXvUc-RCP1Gi5m/view' }
    teacher_files: [ 'ben.py' ]
  documentation: [ 'NonBlockingGame', 'GameBase', 'NamedColor', 'NamedSymbol' ]
